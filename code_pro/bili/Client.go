package bili

import (
    "fmt"
    "log"
    "os"
    "strconv"
    "strings"
    "time"

    "github.com/playwright-community/playwright-go"
    "go_code/code_pro/crawlerFactor"
    "go_code/code_pro/dataconfig"
)

const (
    hostUrl = "https://api.bilibili.com"
)

// type RequestParams struct {
//     Oid    string `json:"oid"`
//     Mode  string `json:"mode"`
//     Type int `json:"type"`
//     PS int `json:"ps"`
// }

type BilibiliCrawler struct {
    crawlerFactor.AbstractCrawler
    platform    string
    loginType   string
    crawlerType string
}

func (b *BilibiliCrawler) InitConfig(platform string, loginType string, crawlerType string) {
    b.platform = platform
    b.loginType = loginType
    b.crawlerType = crawlerType
}

func (b *BilibiliCrawler) StartCrawler() error {
    pw, err := playwright.Run()
    if err != nil {
        return err
    }
    // 浏览器类型
    chromium := pw.Chromium
    // fmt.Println("chromium = ", chromium)

    // 持久化浏览器
    contextBrowser, err := launchPersistentBrowser(chromium, nil, true)
    if err != nil {
        return err
    }

    // 防止泄露
    defer func() {
        if err = contextBrowser.Close(); err != nil {
            log.Fatalf("could not close browser: %v", err)
        }

        if err = pw.Stop(); err != nil {
            log.Fatalf("could not stop Playwright: %v", err)
        }
    }()

    // 打开一个新的页面
    pages := contextBrowser.Pages()
    page := pages[0]

    // 防止被检测脚本
    ScriptPath := "/Users/xd_yuan/go_code/chromepd/Test/stealth.min.js"
    err = contextBrowser.AddInitScript(playwright.Script{Path: playwright.String(ScriptPath)})
    if err != nil {
        return err
    }

    // 测试是否登录
    flag := Pong(page)

    if !flag {
        // 未登录 去登录 并且保存cookie
        log.Println("未登录,准备去登录")
        err := ReadyLogin(page)
        if err != nil {
            return err
        }
    }

    next := 0
    err = getVideoComments(page, next)
    if err != nil {
        log.Fatalf("could not create page: %v", err)
    }

    log.Println("抓取结束!")

    // // 访问目标页面 并且等待页面加载完成
    // if _, err = page.Goto("https://www.bilibili.com/video/BV1S5411i7Me", playwright.PageGotoOptions{
    //     WaitUntil: playwright.WaitUntilStateLoad,
    // }); err != nil {
    //     log.Fatalf("could not goto: %v", err)
    // }
    //
    // // 监听reply请求
    // fmt.Println("登录成功,开始监听")
    // go func() {
    //     err = page.Route("**/x/v2/reply/wbi/main?*", func(route playwright.Route) {
    //         go func(gRoute playwright.Route) {
    //
    //             // 使用fetch 基于当前页面的上下文去访问
    //             fetch, _ := gRoute.Fetch()
    //
    //             var response1 AutoGenerated
    //             err2 := fetch.JSON(&response1)
    //             if err2 != nil {
    //                 log.Fatalf("could not create page: %v", err2)
    //             }
    //
    //             // 输出一级评论
    //             for _, v := range response1.Data.Replies {
    //                 fmt.Println(v.Content.Message)
    //             }
    //
    //             gRoute.Continue()
    //         }(route)
    //     })
    //     if err != nil {
    //         log.Fatalf("could not set route handler: %v", err)
    //     }
    // }()
    //
    // for {
    //     _, _ = page.Evaluate(`window.scrollBy(0, 500);`)
    //     time.Sleep(1 * time.Second)
    //
    //     scrollTop, _ := page.Evaluate("document.documentElement.scrollTop")
    //     scrollHeight, _ := page.Evaluate("document.documentElement.scrollHeight")
    //     clientHeight, _ := page.Evaluate("document.documentElement.clientHeight")
    //
    //     scrollTopFloat, ok := scrollTop.(float64)
    //     if !ok {
    //         scrollTopFloat = float64(scrollTop.(int))
    //     }
    //
    //     scrollHeightFloat, ok := scrollHeight.(float64)
    //     if !ok {
    //         scrollHeightFloat = float64(scrollHeight.(int))
    //     }
    //
    //     clientHeightFloat, ok := clientHeight.(float64)
    //     if !ok {
    //         clientHeightFloat = float64(clientHeight.(int))
    //     }
    //
    //     if scrollTopFloat+clientHeightFloat >= scrollHeightFloat {
    //         break
    //     }
    // }

    return nil
}

func launchPersistentBrowser(chromium playwright.BrowserType, playwrightProxy map[string]interface{}, headless bool) (playwright.BrowserContext, error) {

    var browserContext playwright.BrowserContext

    // /Users/xd_yuan/go_code
    currentDir, err := os.Getwd()
    if err != nil {
        return nil, err
    }

    // 文件路径添加
    saveDir := currentDir + "/bili/saveData"
    fmt.Println("saveDir = ", saveDir)

    // 持久化浏览器
    browserContext, err = chromium.LaunchPersistentContext(saveDir, playwright.BrowserTypeLaunchPersistentContextOptions{
        AcceptDownloads: playwright.Bool(true),
        Headless:        playwright.Bool(headless),
        Timeout:         playwright.Float(90000),
        UserAgent:       playwright.String("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"),
        // 是否设置代理
        // Proxy:  &playwright.Proxy{
        //     Server:   "",
        //     Bypass:   nil,
        //     Username: nil,
        //     Password: nil,
        // },
    })

    return browserContext, nil
}

func getVideoComments(page playwright.Page, nextPage int) error {
    // urlStr := "https://api.bilibili.com/x/v2/reply/wbi/main?"
    //
    // paramsMap := map[string]string{
    //     "mode": dataconfig.VIDEO_MODE,
    //     "next": strconv.Itoa(nextPage),
    //     "ps":   dataconfig.VIDEO_PS,
    //     "type": dataconfig.VIDEO_TYPE,
    //     "oid":  dataconfig.VIDEO_LIST[0],
    // }
    //
    // for k, v := range paramsMap {
    //     urlStr += k + "=" + v + "&"
    // }
    //
    // urlStr = urlStr[:len(urlStr)-1]
    //
    // fmt.Println("urlStr = ", urlStr)

    // 权限不足
    //  https://api.bilibili.com/x/v2/reply/wbi/main?mode=3&next=0&oid=BV1S5411i7Me&ps=20&type=1&wts=1705742897&w_rid=9546095a5cf906ef8ffa10d29c608063

    // 可以访问
    // https://api.bilibili.com/x/v2/reply/wbi/main?mode=0&next=3&oid=239052422&ps=20&type=1&wts=1705742897&w_rid=d86733297ed3e36d17c5bdaf03e71f14

    urlStr := "https://api.bilibili.com/x/v2/reply/wbi/main?"

    // 基于加密的参数

    var endFlag bool
    newNextPage := nextPage

    for {
        urlStr = "https://api.bilibili.com/x/v2/reply/wbi/main?"
        time.Sleep(1 * time.Second)
        imgKey, subKey := getWbiKeys(page)
        fmt.Println("imgKey = ", imgKey)
        fmt.Println("subKey = ", subKey)
        fmt.Println("newNextPage = ", newNextPage)
        paramsMap := map[string]string{
            "mode": dataconfig.VIDEO_MODE,
            "next": strconv.Itoa(newNextPage),
            "ps":   dataconfig.VIDEO_PS,
            "type": dataconfig.VIDEO_TYPE,
            "oid":  dataconfig.VIDEO_LIST[0],
        }

        newNextPage++

        for k, v := range paramsMap {
            urlStr += k + "=" + v + "&"
        }

        urlStr := urlStr[:len(urlStr)-1]

        wbiurl, _ := NewBilibiliSign(imgKey, subKey).Sign(urlStr)

        get, err := page.Request().Get(wbiurl, playwright.APIRequestContextGetOptions{})

        if err != nil {
            log.Fatalf("could not create page: %v", err)
            return err
        }

        var resData AutoGenerated

        err = get.JSON(&resData)

        if err != nil {
            log.Fatalf("could not create page222: %v", err)
            return err
        }

        if resData.Code != 0 {
            return fmt.Errorf("获取评论失败,返回code != 0: %v", err)
        }

        for k, v := range resData.Data.Replies {
            fmt.Printf("评论索引:%d, 评论内容:%s\n", k, v.Content.Message)
        }

        if resData.Data.Cursor.IsEnd == true {
            endFlag = true
        }

        // 控制结束
        if endFlag == true {
            break
        }

    }
    return nil
}

func getWbiKeys(page playwright.Page) (imgKey, subKey string) {

    // 在window.localStorage中获取wbi_img 和 wbi_sub_url
    // 去拿wbi_img 和 wbi_sub_url
    localStorage, err := page.Evaluate(`() => {
    let result = {};
    try {
        for (let i = 0; i < localStorage.length; i++) {
            let key = localStorage.key(i);
            let value = localStorage.getItem(key);
            result[key] = value;
        }
    } catch (e) {
        console.error(e);
    }
    return result;
}`)
    if err != nil {
        log.Fatalf("could not evaluate script: %v", err)
    }

    // Check if localStorage is empty
    localStorageMap, ok := localStorage.(map[string]interface{})
    if !ok {
        log.Fatalf("could not convert localStorage to map: %v", localStorage)
        return "", ""
    }

    fmt.Println("len(localStorageMap) = ", len(localStorageMap))
    if len(localStorageMap) == 0 {
        log.Println("localStorage is empty!!!")
        log.Println("尝试去从navigator中获取")
        imgKey, subKey, err = PongAndRespKeys(page)
        if err != nil {
            log.Fatalf("PongAndRespKeys获取失败: %v", err)
        }
        return imgKey, subKey
    }

    log.Println("尝试去从本地存储中获取")
    wbi_img_url, ok := localStorageMap["wbi_img_url"].(string)
    if !ok {
        log.Fatalf("could not convert wbi_img to string: %v", localStorage)
    }
    imgKeysList := strings.Split(wbi_img_url, "/")
    imgKeys := strings.Split(imgKeysList[len(imgKeysList)-1], ".")[0]

    wbi_sub_url, ok := localStorageMap["wbi_sub_url"].(string)
    if !ok {
        log.Fatalf("could not convert wbi_img to string: %v", localStorage)
    }
    subKeysList := strings.Split(wbi_sub_url, "/")
    subKeys := strings.Split(subKeysList[len(subKeysList)-1], ".")[0]

    imgKey = imgKeys
    subKey = subKeys

    return imgKey, subKey
}
